{"ast":null,"code":"import contract from \"../Ethereum/contract\";\nimport web3 from \"../Ethereum/web3\";\nimport { ethers } from \"ethers\";\nexport default (async (blockNumber, events) => {\n  let provider = new ethers.providers.Web3Provider(web3.currentProvider);\n  let abi = [\"event DataTransfer(string data_type, string timestamp, uint minPayment, address indexed source, uint indexed serialID, uint indexed tag)\"];\n  let ens = new ethers.Contract(contract._address, abi, provider);\n  var filter = ens.filters.DataTransfer();\n  filter.fromBlock = 0;\n  filter.toBlock = \"latest\";\n  return blockNumber = await provider.getBlockNumber(), events = (await provider.getLogs(filter)).reverse();\n});","map":{"version":3,"sources":["/home/paulo/Desktop/Private_Blockchain/Web/WebApp/components/Events.js"],"names":["contract","web3","ethers","blockNumber","events","provider","providers","Web3Provider","currentProvider","abi","ens","Contract","_address","filter","filters","DataTransfer","fromBlock","toBlock","getBlockNumber","getLogs","reverse"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,gBAAe,OAAOC,WAAP,EAAoBC,MAApB,KAA+B;AAC1C,MAAIC,QAAQ,GAAG,IAAIH,MAAM,CAACI,SAAP,CAAiBC,YAArB,CAAkCN,IAAI,CAACO,eAAvC,CAAf;AAEA,MAAIC,GAAG,GAAG,CACR,0IADQ,CAAV;AAIA,MAAIC,GAAG,GAAG,IAAIR,MAAM,CAACS,QAAX,CAAoBX,QAAQ,CAACY,QAA7B,EAAuCH,GAAvC,EAA4CJ,QAA5C,CAAV;AAEA,MAAIQ,MAAM,GAAGH,GAAG,CAACI,OAAJ,CAAYC,YAAZ,EAAb;AACAF,EAAAA,MAAM,CAACG,SAAP,GAAmB,CAAnB;AACAH,EAAAA,MAAM,CAACI,OAAP,GAAiB,QAAjB;AAEA,SACId,WAAW,GAAG,MAAME,QAAQ,CAACa,cAAT,EAApB,EACAd,MAAM,GAAG,CAAC,MAAMC,QAAQ,CAACc,OAAT,CAAiBN,MAAjB,CAAP,EAAiCO,OAAjC,EAFb;AAIH,CAjBD","sourcesContent":["import contract from \"../Ethereum/contract\";\nimport web3 from \"../Ethereum/web3\";\nimport { ethers } from \"ethers\";\n\nexport default async (blockNumber, events) => {\n    let provider = new ethers.providers.Web3Provider(web3.currentProvider);\n\n    let abi = [\n      \"event DataTransfer(string data_type, string timestamp, uint minPayment, address indexed source, uint indexed serialID, uint indexed tag)\",\n    ];\n\n    let ens = new ethers.Contract(contract._address, abi, provider);\n\n    var filter = ens.filters.DataTransfer();\n    filter.fromBlock = 0;\n    filter.toBlock = \"latest\";\n\n    return (\n        blockNumber = await provider.getBlockNumber(),\n        events = (await provider.getLogs(filter)).reverse()\n        );\n}"]},"metadata":{},"sourceType":"module"}