{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/pages/data/submit.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Message } from \"semantic-ui-react\";\nimport contract from \"../../Ethereum/contract\";\nimport web3 from \"../../Ethereum/web3\";\nimport { ethers } from \"ethers\";\nimport Common from \"ethereumjs-common\";\nimport { bufferToHex, privateToAddress } from \"ethereumjs-util\";\nimport Layout from \"../../components/Layout\";\nimport { Router } from '../../routes';\n\nvar Tx = require(\"ethereumjs-tx\");\n\nclass Submit extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      type: \"\",\n      minPay: \"\",\n      id: \"\",\n      errorMessage: \"\",\n      successMessage: \"\",\n      loading: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        errorMessage: \"\",\n        successMessage: \"\"\n      });\n      const timestamp = +new Date();\n      console.log(timestamp);\n\n      try {\n        switch (this.state.type.toLowerCase()) {\n          case \"temp\":\n            var tag = 1;\n            break;\n\n          case \"hum\":\n            var tag = 2;\n            break;\n\n          case \"both\":\n            var tag = 3;\n            break;\n\n          case \"pressure\":\n            var tag = 4;\n            break;\n\n          case \"test\":\n            var tag = 5;\n            break;\n\n          default:\n            var tag = 0;\n            break;\n        } // console.log(tag);\n\n\n        const addressFrom = \"0x1206D8C3c73e40c8AfD0D878bbaa28609F9A72a9\";\n        var privateKey = new Buffer.from(\"e8d1574304a68b5f794d33a842389350d93e49d46b6871571f9b64eaa53131ec\", \"hex\");\n        var nonceNumber = web3.utils.toHex(await web3.eth.getTransactionCount(addressFrom, \"pending\")); //console.log(nonceNumber);\n\n        const customCommon = Common.forCustomChain(\"mainnet\", {\n          name: \"TestNetwork\",\n          networkId: 7777,\n          chainId: 7777\n        }, \"petersburg\");\n        var myData = contract.methods.EmitEvent(this.state.type, timestamp.toString(), this.state.minPay, this.state.id, tag).encodeABI();\n        var rawTx = {\n          nonce: nonceNumber,\n          from: addressFrom,\n          gasLimit: web3.utils.toHex(100000),\n          gasPrice: web3.utils.toHex(10e9),\n          to: contract._address,\n          data: myData\n        };\n        var tx = new Tx.Transaction(rawTx, {\n          common: customCommon\n        });\n        tx.sign(privateKey);\n        var serializedTx = tx.serialize();\n        var receipt = await web3.eth.sendSignedTransaction(\"0x\" + serializedTx.toString(\"hex\")).on(\"receipt\", console.log);\n        this.setState({\n          successMessage: \"Transaction successfull, transaction hash: \" + receipt.transactionHash\n        });\n        setTimeout(Router.pushRoute('/'), 5000);\n      } catch (error) {\n        this.setState({\n          errorMessage: error.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Welcome to the Events Contract!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\" \", \"Fill the form below to send data information to the blockchain:\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: this.onSubmit,\n          error: !!this.state.errorMessage,\n          success: !!this.state.successMessage,\n          children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n            fluid: true,\n            label: \"Data Type:\",\n            placeholder: \"Temp / Humidity / Both\",\n            id: \"datatype\",\n            value: this.state.type,\n            onChange: event => this.setState({\n              type: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            fluid: true,\n            label: \"Minimum Payment (in Ether): \",\n            placeholder: \"Min. Payment\",\n            value: this.state.minPay,\n            onChange: event => this.setState({\n              minPay: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            fluid: true,\n            label: \"Serial number: \",\n            placeholder: \"Serial Number\",\n            value: this.state.id,\n            onChange: event => this.setState({\n              id: event.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Message, {\n            error: true,\n            header: \"Oops!\",\n            content: this.state.errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Message, {\n            success: true,\n            header: \"Completed!\",\n            content: this.state.successMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            loading: this.state.loading,\n            primary: true,\n            children: \"Submit!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Submit;","map":{"version":3,"sources":["/home/paulo/Desktop/Private_Blockchain/Web/WebApp/pages/data/submit.js"],"names":["React","Component","Form","Button","Message","contract","web3","ethers","Common","bufferToHex","privateToAddress","Layout","Router","Tx","require","Submit","type","minPay","id","errorMessage","successMessage","loading","event","preventDefault","setState","timestamp","Date","console","log","state","toLowerCase","tag","addressFrom","privateKey","Buffer","from","nonceNumber","utils","toHex","eth","getTransactionCount","customCommon","forCustomChain","name","networkId","chainId","myData","methods","EmitEvent","toString","encodeABI","rawTx","nonce","gasLimit","gasPrice","to","_address","data","tx","Transaction","common","sign","serializedTx","serialize","receipt","sendSignedTransaction","on","transactionHash","setTimeout","pushRoute","error","message","render","onSubmit","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Message } from \"semantic-ui-react\";\nimport contract from \"../../Ethereum/contract\";\nimport web3 from \"../../Ethereum/web3\";\nimport { ethers } from \"ethers\";\nimport Common from \"ethereumjs-common\";\nimport { bufferToHex, privateToAddress } from \"ethereumjs-util\";\nimport Layout from \"../../components/Layout\";\nimport { Router } from '../../routes';\nvar Tx = require(\"ethereumjs-tx\");\n\nclass Submit extends Component {\n  state = {\n    type: \"\",\n    minPay: \"\",\n    id: \"\",\n    errorMessage: \"\",\n    successMessage: \"\",\n    loading: false,\n  };\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({ loading: true, errorMessage: \"\", successMessage: \"\" });\n\n    const timestamp = +new Date();\n    console.log(timestamp);\n\n    try {\n      switch (this.state.type.toLowerCase()) {\n        case \"temp\":\n          var tag = 1;\n          break;\n        case \"hum\":\n          var tag = 2;\n          break;\n        case \"both\":\n          var tag = 3;\n          break;\n        case \"pressure\":\n          var tag = 4;\n          break;\n        case \"test\":\n          var tag = 5;\n          break;\n        default:\n          var tag = 0;\n          break;\n      }\n      // console.log(tag);\n\n      const addressFrom = \"0x1206D8C3c73e40c8AfD0D878bbaa28609F9A72a9\";\n      var privateKey = new Buffer.from(\n        \"e8d1574304a68b5f794d33a842389350d93e49d46b6871571f9b64eaa53131ec\",\n        \"hex\"\n      );\n      var nonceNumber = web3.utils.toHex(\n        await web3.eth.getTransactionCount(addressFrom, \"pending\")\n      );\n      //console.log(nonceNumber);\n      const customCommon = Common.forCustomChain(\n        \"mainnet\",\n        {\n          name: \"TestNetwork\",\n          networkId: 7777,\n          chainId: 7777,\n        },\n        \"petersburg\"\n      );\n\n      var myData = contract.methods\n        .EmitEvent(\n          this.state.type,\n          timestamp.toString(),\n          this.state.minPay,\n          this.state.id,\n          tag\n        )\n        .encodeABI();\n\n      var rawTx = {\n        nonce: nonceNumber,\n        from: addressFrom,\n        gasLimit: web3.utils.toHex(100000),\n        gasPrice: web3.utils.toHex(10e9),\n        to: contract._address,\n        data: myData,\n      };\n\n      var tx = new Tx.Transaction(rawTx, { common: customCommon });\n      tx.sign(privateKey);\n      var serializedTx = tx.serialize();\n\n      var receipt = await web3.eth\n        .sendSignedTransaction(\"0x\" + serializedTx.toString(\"hex\"))\n        .on(\"receipt\", console.log);\n\n        this.setState({successMessage: \"Transaction successfull, transaction hash: \" + receipt.transactionHash});\n    \n        setTimeout(Router.pushRoute('/'),5000);\n    } catch (error) {\n      this.setState({ errorMessage: error.message });\n    }\n    this.setState({loading: false})\n  };\n\n  render() {\n    return (\n      <Layout>\n        <div>\n          <h2>Welcome to the Events Contract!</h2>\n          <h3>\n            {\" \"}\n            Fill the form below to send data information to the blockchain:{\" \"}\n          </h3>\n          <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage} success={!!this.state.successMessage}>\n            <Form.Input\n              fluid\n              label=\"Data Type:\"\n              placeholder=\"Temp / Humidity / Both\"\n              id=\"datatype\"\n              value={this.state.type}\n              onChange={(event) => this.setState({ type: event.target.value })}\n            />\n            <Form.Input\n              fluid\n              label=\"Minimum Payment (in Ether): \"\n              placeholder=\"Min. Payment\"\n              value={this.state.minPay}\n              onChange={(event) =>\n                this.setState({ minPay: event.target.value })\n              }\n            />\n            <Form.Input\n              fluid\n              label=\"Serial number: \"\n              placeholder=\"Serial Number\"\n              value={this.state.id}\n              onChange={(event) => this.setState({ id: event.target.value })}\n            />\n            <h4></h4>\n            <Message error header=\"Oops!\" content={this.state.errorMessage} />\n            <Message success header=\"Completed!\" content={this.state.successMessage} />\n            <Button loading={this.state.loading} primary>\n              Submit!\n            </Button>\n          </Form>\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Submit;\n"]},"metadata":{},"sourceType":"module"}