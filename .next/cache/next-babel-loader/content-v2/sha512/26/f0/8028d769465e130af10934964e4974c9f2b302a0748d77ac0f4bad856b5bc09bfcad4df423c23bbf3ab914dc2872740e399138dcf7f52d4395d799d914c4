{"ast":null,"code":"import contract from \"../Ethereum/contract\";\nimport web3 from \"../Ethereum/web3\";\nimport { ethers } from \"ethers\";\nexport default async function getEvents() {\n  let provider = new ethers.providers.Web3Provider(web3.currentProvider);\n  let abi = [\"event DataTransfer(string data_type, string timestamp, uint minPayment, address indexed source, uint indexed serialID, uint indexed tag)\"];\n  let ens = new ethers.Contract(contract._address, abi, provider);\n  var filter = ens.filters.DataTransfer();\n  filter.fromBlock = 0;\n  filter.toBlock = \"latest\";\n  const blockNumber = await provider.getBlockNumber();\n  const events = (await provider.getLogs(filter)).reverse();\n  return {\n    blockNumber: blockNumber,\n    events: events\n  };\n}\n;","map":{"version":3,"sources":["/home/paulo/Desktop/Private_Blockchain/Web/WebApp/components/Events.js"],"names":["contract","web3","ethers","getEvents","provider","providers","Web3Provider","currentProvider","abi","ens","Contract","_address","filter","filters","DataTransfer","fromBlock","toBlock","blockNumber","getBlockNumber","events","getLogs","reverse"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,eAAe,eAAeC,SAAf,GAA2B;AACtC,MAAIC,QAAQ,GAAG,IAAIF,MAAM,CAACG,SAAP,CAAiBC,YAArB,CAAkCL,IAAI,CAACM,eAAvC,CAAf;AAEA,MAAIC,GAAG,GAAG,CACR,0IADQ,CAAV;AAIA,MAAIC,GAAG,GAAG,IAAIP,MAAM,CAACQ,QAAX,CAAoBV,QAAQ,CAACW,QAA7B,EAAuCH,GAAvC,EAA4CJ,QAA5C,CAAV;AAEA,MAAIQ,MAAM,GAAGH,GAAG,CAACI,OAAJ,CAAYC,YAAZ,EAAb;AACAF,EAAAA,MAAM,CAACG,SAAP,GAAmB,CAAnB;AACAH,EAAAA,MAAM,CAACI,OAAP,GAAiB,QAAjB;AAEA,QAAMC,WAAW,GAAG,MAAMb,QAAQ,CAACc,cAAT,EAA1B;AAEA,QAAMC,MAAM,GAAG,CAAC,MAAMf,QAAQ,CAACgB,OAAT,CAAiBR,MAAjB,CAAP,EAAiCS,OAAjC,EAAf;AAEA,SAAO;AACHJ,IAAAA,WAAW,EAAEA,WADV;AAEHE,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH;AAAA","sourcesContent":["import contract from \"../Ethereum/contract\";\nimport web3 from \"../Ethereum/web3\";\nimport { ethers } from \"ethers\";\n\nexport default async function getEvents() {\n    let provider = new ethers.providers.Web3Provider(web3.currentProvider);\n\n    let abi = [\n      \"event DataTransfer(string data_type, string timestamp, uint minPayment, address indexed source, uint indexed serialID, uint indexed tag)\",\n    ];\n\n    let ens = new ethers.Contract(contract._address, abi, provider);\n\n    var filter = ens.filters.DataTransfer();\n    filter.fromBlock = 0;\n    filter.toBlock = \"latest\";\n\n    const blockNumber = await provider.getBlockNumber();\n    \n    const events = (await provider.getLogs(filter)).reverse();\n\n    return {\n        blockNumber: blockNumber,\n        events: events\n    };\n};"]},"metadata":{},"sourceType":"module"}