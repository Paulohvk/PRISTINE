{"ast":null,"code":"import _regeneratorRuntime from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport contract from \"../Ethereum/contract\";\nimport web3 from \"../Ethereum/web3\";\nimport { ethers } from \"ethers\";\nexport default function getEvents(_x, _x2) {\n  return _getEvents.apply(this, arguments);\n}\n\nfunction _getEvents() {\n  _getEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(blockNumber, events) {\n    var provider, abi, ens, filter;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = new ethers.providers.Web3Provider(web3.currentProvider);\n            abi = [\"event DataTransfer(string data_type, string timestamp, uint minPayment, address indexed source, uint indexed serialID, uint indexed tag)\"];\n            ens = new ethers.Contract(contract._address, abi, provider);\n            filter = ens.filters.DataTransfer();\n            filter.fromBlock = 0;\n            filter.toBlock = \"latest\";\n            _context.next = 8;\n            return provider.getLogs(filter);\n\n          case 8:\n            return _context.abrupt(\"return\", events = _context.sent.reverse());\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getEvents.apply(this, arguments);\n}\n\n;","map":{"version":3,"sources":["/home/paulo/Desktop/Private_Blockchain/Web/WebApp/components/Events.js"],"names":["contract","web3","ethers","getEvents","blockNumber","events","provider","providers","Web3Provider","currentProvider","abi","ens","Contract","_address","filter","filters","DataTransfer","fromBlock","toBlock","getLogs","reverse"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,wBAA8BC,SAA9B;AAAA;AAAA;;;wEAAe,iBAAyBC,WAAzB,EAAsCC,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,QADO,GACI,IAAIJ,MAAM,CAACK,SAAP,CAAiBC,YAArB,CAAkCP,IAAI,CAACQ,eAAvC,CADJ;AAGPC,YAAAA,GAHO,GAGD,CACR,0IADQ,CAHC;AAOPC,YAAAA,GAPO,GAOD,IAAIT,MAAM,CAACU,QAAX,CAAoBZ,QAAQ,CAACa,QAA7B,EAAuCH,GAAvC,EAA4CJ,QAA5C,CAPC;AASPQ,YAAAA,MATO,GASEH,GAAG,CAACI,OAAJ,CAAYC,YAAZ,EATF;AAUXF,YAAAA,MAAM,CAACG,SAAP,GAAmB,CAAnB;AACAH,YAAAA,MAAM,CAACI,OAAP,GAAiB,QAAjB;AAXW;AAAA,mBAcSZ,QAAQ,CAACa,OAAT,CAAiBL,MAAjB,CAdT;;AAAA;AAAA,6CAcPT,MAdO,iBAcmCe,OAdnC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBd","sourcesContent":["import contract from \"../Ethereum/contract\";\nimport web3 from \"../Ethereum/web3\";\nimport { ethers } from \"ethers\";\n\nexport default async function getEvents(blockNumber, events) {\n    let provider = new ethers.providers.Web3Provider(web3.currentProvider);\n\n    let abi = [\n      \"event DataTransfer(string data_type, string timestamp, uint minPayment, address indexed source, uint indexed serialID, uint indexed tag)\",\n    ];\n\n    let ens = new ethers.Contract(contract._address, abi, provider);\n\n    var filter = ens.filters.DataTransfer();\n    filter.fromBlock = 0;\n    filter.toBlock = \"latest\";\n\n    return (\n        events = (await provider.getLogs(filter)).reverse()\n        );\n};"]},"metadata":{},"sourceType":"module"}