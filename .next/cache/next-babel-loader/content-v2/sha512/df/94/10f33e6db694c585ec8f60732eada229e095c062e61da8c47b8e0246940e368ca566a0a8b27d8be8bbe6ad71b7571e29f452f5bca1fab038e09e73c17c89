{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/pages/data/submit.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Message } from \"semantic-ui-react\";\nimport contract from \"../../Ethereum/contract\";\nimport web3 from \"../../Ethereum/web3\";\nimport { ethers } from \"ethers\";\nimport Common from \"ethereumjs-common\";\nimport { bufferToHex, privateToAddress } from \"ethereumjs-util\";\nimport Layout from \"../../components/Layout\";\nimport { Router } from '../../routes';\n\nvar Tx = require(\"ethereumjs-tx\");\n\nvar Submit = /*#__PURE__*/function (_Component) {\n  _inherits(Submit, _Component);\n\n  var _super = _createSuper(Submit);\n\n  function Submit() {\n    var _this;\n\n    _classCallCheck(this, Submit);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      type: \"\",\n      minPay: \"\",\n      id: \"\",\n      errorMessage: \"\",\n      successMessage: \"\",\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var timestamp, tag, addressFrom, privateKey, nonceNumber, customCommon, myData, rawTx, tx, serializedTx, receipt;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: \"\",\n                  successMessage: \"\"\n                });\n\n                timestamp = +new Date();\n                console.log(timestamp);\n                _context.t0 = _this.state.type.toLowerCase();\n                _context.next = _context.t0 === \"temp\" ? 7 : _context.t0 === \"hum\" ? 9 : _context.t0 === \"both\" ? 11 : _context.t0 === \"pressure\" ? 13 : _context.t0 === \"test\" ? 15 : 17;\n                break;\n\n              case 7:\n                tag = 1;\n                return _context.abrupt(\"break\", 19);\n\n              case 9:\n                tag = 2;\n                return _context.abrupt(\"break\", 19);\n\n              case 11:\n                tag = 3;\n                return _context.abrupt(\"break\", 19);\n\n              case 13:\n                tag = 4;\n                return _context.abrupt(\"break\", 19);\n\n              case 15:\n                tag = 5;\n                return _context.abrupt(\"break\", 19);\n\n              case 17:\n                tag = 0;\n                return _context.abrupt(\"break\", 19);\n\n              case 19:\n                _context.prev = 19;\n                addressFrom = \"0x1206D8C3c73e40c8AfD0D878bbaa28609F9A72a9\";\n                privateKey = new Buffer.from(\"e8d1574304a68b5f794d33a842389350d93e49d46b6871571f9b64eaa53131ec\", \"hex\");\n                _context.t1 = web3.utils;\n                _context.next = 25;\n                return web3.eth.getTransactionCount(addressFrom, \"pending\");\n\n              case 25:\n                _context.t2 = _context.sent;\n                nonceNumber = _context.t1.toHex.call(_context.t1, _context.t2);\n                //console.log(nonceNumber);\n                customCommon = Common.forCustomChain(\"mainnet\", {\n                  name: \"TestNetwork\",\n                  networkId: 7777,\n                  chainId: 7777\n                }, \"petersburg\");\n                myData = contract.methods.EmitEvent(_this.state.type, timestamp.toString(), _this.state.minPay, _this.state.id, tag).encodeABI();\n                rawTx = {\n                  nonce: nonceNumber,\n                  from: addressFrom,\n                  gasLimit: web3.utils.toHex(100000),\n                  gasPrice: web3.utils.toHex(10e9),\n                  to: contract._address,\n                  data: myData\n                };\n                tx = new Tx.Transaction(rawTx, {\n                  common: customCommon\n                });\n                tx.sign(privateKey);\n                serializedTx = tx.serialize();\n                _context.next = 35;\n                return web3.eth.sendSignedTransaction(\"0x\" + serializedTx.toString(\"hex\")).on(\"receipt\", console.log);\n\n              case 35:\n                receipt = _context.sent;\n\n                _this.setState({\n                  successMessage: \"Transaction successfull, transaction hash: \" + receipt.transactionHash\n                }); // Router.pushRoute('/');\n\n\n                _context.next = 42;\n                break;\n\n              case 39:\n                _context.prev = 39;\n                _context.t3 = _context[\"catch\"](19);\n\n                _this.setState({\n                  errorMessage: _context.t3.message\n                });\n\n              case 42:\n                _this.setState({\n                  loading: false\n                });\n\n              case 43:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[19, 39]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(Submit, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(Layout, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Welcome to the Events Contract!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" \", \"Fill the form below to send data information to the blockchain:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: this.onSubmit,\n            error: !!this.state.errorMessage,\n            success: !!this.state.successMessage,\n            children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n              fluid: true,\n              label: {\n                children: \"Data Type:\",\n                style: {\n                  fontSize: '16px'\n                }\n              },\n              placeholder: \"Temp / Humidity / Both\",\n              id: \"datatype\",\n              value: this.state.type,\n              onChange: function onChange(event) {\n                return _this2.setState({\n                  type: event.target.value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n              fluid: true,\n              label: {\n                children: \"Minimum Payment (in Ether): \",\n                style: {\n                  fontSize: '16px'\n                }\n              },\n              placeholder: \"Min. Payment\",\n              value: this.state.minPay,\n              onChange: function onChange(event) {\n                return _this2.setState({\n                  minPay: event.target.value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n              fluid: true,\n              label: {\n                children: \"Serial number: \",\n                style: {\n                  fontSize: '16px'\n                }\n              },\n              placeholder: \"Serial Number\",\n              value: this.state.id,\n              onChange: function onChange(event) {\n                return _this2.setState({\n                  id: event.target.value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Message, {\n              error: true,\n              header: \"Oops!\",\n              content: this.state.errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Message, {\n              success: true,\n              header: \"Completed!\",\n              content: this.state.successMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              loading: this.state.loading,\n              primary: true,\n              children: \"Submit!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Submit;\n}(Component);\n\nexport default Submit;","map":{"version":3,"sources":["/home/paulo/Desktop/Private_Blockchain/Web/WebApp/pages/data/submit.js"],"names":["React","Component","Form","Button","Message","contract","web3","ethers","Common","bufferToHex","privateToAddress","Layout","Router","Tx","require","Submit","type","minPay","id","errorMessage","successMessage","loading","event","preventDefault","setState","timestamp","Date","console","log","state","toLowerCase","tag","addressFrom","privateKey","Buffer","from","utils","eth","getTransactionCount","nonceNumber","toHex","customCommon","forCustomChain","name","networkId","chainId","myData","methods","EmitEvent","toString","encodeABI","rawTx","nonce","gasLimit","gasPrice","to","_address","data","tx","Transaction","common","sign","serializedTx","serialize","sendSignedTransaction","on","receipt","transactionHash","message","onSubmit","children","style","fontSize","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Message } from \"semantic-ui-react\";\nimport contract from \"../../Ethereum/contract\";\nimport web3 from \"../../Ethereum/web3\";\nimport { ethers } from \"ethers\";\nimport Common from \"ethereumjs-common\";\nimport { bufferToHex, privateToAddress } from \"ethereumjs-util\";\nimport Layout from \"../../components/Layout\";\nimport { Router } from '../../routes';\nvar Tx = require(\"ethereumjs-tx\");\n\nclass Submit extends Component {\n  state = {\n    type: \"\",\n    minPay: \"\",\n    id: \"\",\n    errorMessage: \"\",\n    successMessage: \"\",\n    loading: false,\n  };\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({ loading: true, errorMessage: \"\", successMessage: \"\" });\n\n    const timestamp = +new Date();\n    console.log(timestamp);\n\n      switch (this.state.type.toLowerCase()) {\n        case \"temp\":\n          var tag = 1;\n          break;\n        case \"hum\":\n          var tag = 2;\n          break;\n        case \"both\":\n          var tag = 3;\n          break;\n        case \"pressure\":\n          var tag = 4;\n          break;\n        case \"test\":\n          var tag = 5;\n          break;\n        default:\n          var tag = 0;\n          break;\n      }\n      // console.log(tag);\n\n      try {\n      const addressFrom = \"0x1206D8C3c73e40c8AfD0D878bbaa28609F9A72a9\";\n      var privateKey = new Buffer.from(\n        \"e8d1574304a68b5f794d33a842389350d93e49d46b6871571f9b64eaa53131ec\",\n        \"hex\"\n      );\n      var nonceNumber = web3.utils.toHex(\n        await web3.eth.getTransactionCount(addressFrom, \"pending\")\n      );\n      //console.log(nonceNumber);\n      const customCommon = Common.forCustomChain(\n        \"mainnet\",\n        {\n          name: \"TestNetwork\",\n          networkId: 7777,\n          chainId: 7777,\n        },\n        \"petersburg\"\n      );\n\n      var myData = contract.methods\n        .EmitEvent(\n          this.state.type,\n          timestamp.toString(),\n          this.state.minPay,\n          this.state.id,\n          tag\n        )\n        .encodeABI();\n\n      var rawTx = {\n        nonce: nonceNumber,\n        from: addressFrom,\n        gasLimit: web3.utils.toHex(100000),\n        gasPrice: web3.utils.toHex(10e9),\n        to: contract._address,\n        data: myData,\n      };\n\n      var tx = new Tx.Transaction(rawTx, { common: customCommon });\n      tx.sign(privateKey);\n      var serializedTx = tx.serialize();\n      \n      var receipt = await web3.eth\n        .sendSignedTransaction(\"0x\" + serializedTx.toString(\"hex\"))\n        .on(\"receipt\", console.log);\n\n        this.setState({successMessage: \"Transaction successfull, transaction hash: \" + receipt.transactionHash});\n    \n       // Router.pushRoute('/');\n    } catch (error) {\n      this.setState({ errorMessage: error.message });\n    }\n    this.setState({loading: false})\n  };\n\n  render() {\n    return (\n      <Layout>\n        <div>\n          <h2>Welcome to the Events Contract!</h2>\n          <h3>\n            {\" \"}\n            Fill the form below to send data information to the blockchain:{\" \"}\n          </h3>\n          <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage} success={!!this.state.successMessage}>\n            <Form.Input\n              fluid\n              label={{ children: \"Data Type:\", style:{ fontSize: '16px' } }}\n              placeholder=\"Temp / Humidity / Both\"\n              id=\"datatype\"\n              value={this.state.type}\n              onChange={(event) => this.setState({ type: event.target.value })}\n            />\n            <Form.Input\n              fluid\n              label={{ children: \"Minimum Payment (in Ether): \", style:{ fontSize: '16px' } }}\n              placeholder=\"Min. Payment\"\n              value={this.state.minPay}\n              onChange={(event) =>\n                this.setState({ minPay: event.target.value })\n              }\n            />\n            <Form.Input\n              fluid\n              label={{ children: \"Serial number: \", style:{ fontSize: '16px' } }}\n              placeholder=\"Serial Number\"\n              value={this.state.id}\n              onChange={(event) => this.setState({ id: event.target.value })}\n            />\n            <h4></h4>\n            <Message error header=\"Oops!\" content={this.state.errorMessage} />\n            <Message success header=\"Completed!\" content={this.state.successMessage} />\n            <Button loading={this.state.loading} primary>\n              Submit!\n            </Button>\n          </Form>\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Submit;\n"]},"metadata":{},"sourceType":"module"}