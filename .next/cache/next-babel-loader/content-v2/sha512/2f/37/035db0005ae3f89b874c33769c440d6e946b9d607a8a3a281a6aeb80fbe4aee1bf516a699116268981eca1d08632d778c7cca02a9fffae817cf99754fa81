{"ast":null,"code":"import _regeneratorRuntime from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport contract from \"../Ethereum/contract\";\nimport web3 from \"../Ethereum/web3\";\nimport { ethers } from \"ethers\";\nexport default function getEvents() {\n  return _getEvents.apply(this, arguments);\n}\n\nfunction _getEvents() {\n  _getEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider, abi, ens, filter, blockNumber, events;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            provider = new ethers.providers.Web3Provider(web3.currentProvider);\n            abi = [\"event DataTransfer(string data_type, string timestamp, uint minPayment, address indexed source, uint indexed serialID, uint indexed tag)\"];\n            ens = new ethers.Contract(contract._address, abi, provider);\n            filter = ens.filters.DataTransfer();\n            filter.fromBlock = 0;\n            filter.toBlock = \"latest\";\n            _context.next = 8;\n            return provider.getBlockNumber();\n\n          case 8:\n            blockNumber = _context.sent;\n            _context.next = 11;\n            return provider.getLogs(filter);\n\n          case 11:\n            events = _context.sent.reverse();\n            return _context.abrupt(\"return\", {\n              blockNumber: blockNumber,\n              events: events\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getEvents.apply(this, arguments);\n}\n\n;","map":{"version":3,"sources":["/home/paulo/Desktop/Private_Blockchain/Web/WebApp/components/Events.js"],"names":["contract","web3","ethers","getEvents","provider","providers","Web3Provider","currentProvider","abi","ens","Contract","_address","filter","filters","DataTransfer","fromBlock","toBlock","getBlockNumber","blockNumber","getLogs","events","reverse"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,wBAA8BC,SAA9B;AAAA;AAAA;;;wEAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,QADO,GACI,IAAIF,MAAM,CAACG,SAAP,CAAiBC,YAArB,CAAkCL,IAAI,CAACM,eAAvC,CADJ;AAGPC,YAAAA,GAHO,GAGD,CACR,0IADQ,CAHC;AAOPC,YAAAA,GAPO,GAOD,IAAIP,MAAM,CAACQ,QAAX,CAAoBV,QAAQ,CAACW,QAA7B,EAAuCH,GAAvC,EAA4CJ,QAA5C,CAPC;AASPQ,YAAAA,MATO,GASEH,GAAG,CAACI,OAAJ,CAAYC,YAAZ,EATF;AAUXF,YAAAA,MAAM,CAACG,SAAP,GAAmB,CAAnB;AACAH,YAAAA,MAAM,CAACI,OAAP,GAAiB,QAAjB;AAXW;AAAA,mBAaeZ,QAAQ,CAACa,cAAT,EAbf;;AAAA;AAaLC,YAAAA,WAbK;AAAA;AAAA,mBAeWd,QAAQ,CAACe,OAAT,CAAiBP,MAAjB,CAfX;;AAAA;AAeLQ,YAAAA,MAfK,iBAeqCC,OAfrC;AAAA,6CAiBJ;AACHH,cAAAA,WAAW,EAAEA,WADV;AAEHE,cAAAA,MAAM,EAAEA;AAFL,aAjBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBd","sourcesContent":["import contract from \"../Ethereum/contract\";\nimport web3 from \"../Ethereum/web3\";\nimport { ethers } from \"ethers\";\n\nexport default async function getEvents() {\n    let provider = new ethers.providers.Web3Provider(web3.currentProvider);\n\n    let abi = [\n      \"event DataTransfer(string data_type, string timestamp, uint minPayment, address indexed source, uint indexed serialID, uint indexed tag)\",\n    ];\n\n    let ens = new ethers.Contract(contract._address, abi, provider);\n\n    var filter = ens.filters.DataTransfer();\n    filter.fromBlock = 0;\n    filter.toBlock = \"latest\";\n\n    const blockNumber = await provider.getBlockNumber();\n    \n    const events = (await provider.getLogs(filter)).reverse();\n\n    return {\n        blockNumber: blockNumber,\n        events: events\n    };\n};"]},"metadata":{},"sourceType":"module"}