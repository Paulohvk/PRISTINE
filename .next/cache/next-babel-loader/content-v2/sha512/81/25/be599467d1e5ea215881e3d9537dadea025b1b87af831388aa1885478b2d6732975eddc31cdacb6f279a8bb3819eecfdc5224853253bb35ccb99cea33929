{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/pages/data/submit.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport contract from '../../Ethereum/contract';\nimport web3 from '../../Ethereum/web3';\nimport { ethers } from \"ethers\";\nimport Common from 'ethereumjs-common';\nimport { bufferToHex, privateToAddress } from 'ethereumjs-util';\n\nvar Tx = require('ethereumjs-tx');\n\nclass Submit extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      type: '',\n      minPay: '',\n      id: '',\n      errorMessage: '',\n      loading: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n      const timestamp = +new Date();\n      console.log(timestamp);\n\n      switch (this.state.type.toLowerCase()) {\n        case 'temp':\n          var tag = 1;\n          break;\n\n        case 'hum':\n          var tag = 2;\n          break;\n\n        case 'both':\n          var tag = 3;\n          break;\n\n        case 'pressure':\n          var tag = 4;\n          break;\n\n        default:\n          var tag = 0;\n          break;\n      }\n\n      console.log(tag);\n      const addressFrom = '0x1206D8C3c73e40c8AfD0D878bbaa28609F9A72a9';\n      var privateKey = new Buffer.from('e8d1574304a68b5f794d33a842389350d93e49d46b6871571f9b64eaa53131ec', 'hex');\n      var nonceNumber = web3.utils.toHex(await web3.eth.getTransactionCount(addressFrom, 'pending'));\n      console.log(nonceNumber);\n      const customCommon = Common.forCustomChain('mainnet', {\n        name: 'TestNetwork',\n        networkId: 7777,\n        chainId: 7777\n      }, 'petersburg');\n      var myData = contract.methods.EmitEvent(this.state.type, timestamp.toString(), this.state.minPay, this.state.id, tag).encodeABI();\n      var rawTx = {\n        nonce: nonceNumber,\n        from: addressFrom,\n        gasLimit: web3.utils.toHex(100000),\n        gasPrice: web3.utils.toHex(10e9),\n        to: contract._address,\n        data: myData\n      };\n      console.log(rawTx);\n      var tx = new Tx.Transaction(rawTx, {\n        common: customCommon\n      });\n      console.log(tx);\n      tx.sign(privateKey);\n      var serializedTx = tx.serialize();\n      await web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')).on('receipt', console.log);\n    });\n  }\n\n  static async getInitialProps() {\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts[0]);\n    return {\n      accounts\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Welcome to the Events Contract!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Fill the form below to send an event to the blockchain: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: this.onSubmit,\n        error: !!this.state.errorMessage,\n        children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n          fluid: true,\n          label: \"Data Type:\",\n          placeholder: \"Temp / Humidity / Both\",\n          id: \"datatype\",\n          value: this.state.type,\n          onChange: event => this.setState({\n            type: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          fluid: true,\n          label: \"Minimum Payment (in Ether): \",\n          placeholder: \"Min. Payment\",\n          value: this.state.minPay,\n          onChange: event => this.setState({\n            minPay: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          fluid: true,\n          label: \"Serial number: \",\n          placeholder: \"Serial Number\",\n          value: this.state.id,\n          onChange: event => this.setState({\n            id: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          loading: this.state.loading,\n          primary: true,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default Submit;","map":{"version":3,"sources":["/home/paulo/Desktop/Private_Blockchain/Web/WebApp/pages/data/submit.js"],"names":["React","Component","Form","Button","Input","Message","contract","web3","ethers","Common","bufferToHex","privateToAddress","Tx","require","Submit","type","minPay","id","errorMessage","loading","event","preventDefault","setState","timestamp","Date","console","log","state","toLowerCase","tag","addressFrom","privateKey","Buffer","from","nonceNumber","utils","toHex","eth","getTransactionCount","customCommon","forCustomChain","name","networkId","chainId","myData","methods","EmitEvent","toString","encodeABI","rawTx","nonce","gasLimit","gasPrice","to","_address","data","tx","Transaction","common","sign","serializedTx","serialize","sendSignedTransaction","on","getInitialProps","accounts","getAccounts","render","onSubmit","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Form, Button, Input, Message} from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport contract from '../../Ethereum/contract';\nimport web3 from '../../Ethereum/web3';\nimport { ethers } from \"ethers\";\nimport Common from 'ethereumjs-common';\nimport { bufferToHex, privateToAddress } from 'ethereumjs-util';\nvar Tx = require('ethereumjs-tx');\n\nclass Submit extends Component {\n\n    state = {\n        type: '',\n        minPay: '',\n        id: '',\n        errorMessage:'',\n        loading: false\n    }\n\n    static async getInitialProps() {\n        const accounts = await web3.eth.getAccounts();\n        console.log(accounts[0]);\n\n        return {accounts};\n    }\n\n    onSubmit = async(event) => {\n        event.preventDefault();\n        this.setState({loading: true, errorMessage: ''});\n\n        const timestamp = + new Date();\n        console.log(timestamp);\n\n        switch (this.state.type.toLowerCase()) {\n            case 'temp':\n               var tag = 1;\n                break;\n            case 'hum':\n                var tag = 2;\n                break;\n            case 'both':\n                var tag = 3;\n                break;\n            case 'pressure':\n                var tag = 4;\n                break;\n            default:\n                var tag = 0;\n                break;\n        }\n\n        console.log(tag);\n\n        const addressFrom = '0x1206D8C3c73e40c8AfD0D878bbaa28609F9A72a9';\n        \n        var privateKey = new Buffer.from('e8d1574304a68b5f794d33a842389350d93e49d46b6871571f9b64eaa53131ec', 'hex')\n\n        var nonceNumber = web3.utils.toHex(await web3.eth.getTransactionCount(addressFrom, 'pending'));\n        console.log(nonceNumber);\n\n        const customCommon = Common.forCustomChain(\n            'mainnet',\n            {\n              name: 'TestNetwork',\n              networkId: 7777,\n              chainId: 7777,\n            }, 'petersburg',);\n\n        var myData = contract.methods.EmitEvent(this.state.type, timestamp.toString(), this.state.minPay, this.state.id, tag).encodeABI();\n\n        var rawTx = {\n            nonce: nonceNumber,\n            from: addressFrom,\n            gasLimit: web3.utils.toHex(100000),\n            gasPrice: web3.utils.toHex(10e9),\n            to: contract._address,\n            data: myData\n        }\n\n        console.log(rawTx);\n\n        var tx = new Tx.Transaction(rawTx,{common: customCommon});\n        console.log(tx);\n\n        tx.sign(privateKey);\n\n        var serializedTx = tx.serialize();\n\n        await web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))\n        .on('receipt', console.log);\n    }\n\n    render() {\n        return (<div>\n            <h2>Welcome to the Events Contract!</h2>\n            <h3> Fill the form below to send an event to the blockchain: </h3>\n            <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n                <Form.Input\n                fluid\n                label='Data Type:'\n                placeholder='Temp / Humidity / Both'\n                id='datatype'\n                value={this.state.type}\n                onChange={event => this.setState({type: event.target.value})}\n                />\n                <Form.Input\n                fluid\n                label='Minimum Payment (in Ether): '\n                placeholder='Min. Payment'\n                value={this.state.minPay}\n                onChange={event => this.setState({minPay: event.target.value})}\n                />\n                <Form.Input\n                fluid\n                label='Serial number: '\n                placeholder='Serial Number'\n                value={this.state.id}\n                onChange={event => this.setState({id: event.target.value})}\n                />\n                <h4></h4>\n                <Button loading={this.state.loading} primary>Submit</Button>\n            </Form>\n            </div>\n        );\n    }\n}\n\nexport default Submit;"]},"metadata":{},"sourceType":"module"}