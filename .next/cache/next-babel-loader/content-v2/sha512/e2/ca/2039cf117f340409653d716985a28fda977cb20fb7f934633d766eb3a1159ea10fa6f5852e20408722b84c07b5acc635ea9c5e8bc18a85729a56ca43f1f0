{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message } from 'semantic-ui-react';\nimport contract from '../Ethereum/contract0';\nimport web3 from '../Ethereum/web3';\nimport Common from 'ethereumjs-common';\nimport { bufferToHex, privateToAddress } from 'ethereumjs-util';\n\nvar Tx = require('ethereumjs-tx');\n\nclass TestIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onClick2\", async event => {\n      const text = await contract.methods.text().call();\n      window.alert(text);\n    });\n  }\n\n  // onClick3 = async(event) => {\n  //     const account = this.props.accounts[0];\n  //     console.log(account);\n  //     await contract.methods.setText(\"Test 1234\")\n  //     .send({from: account, gas: '100000'});\n  // }\n  // onClick4 = async(event) => {\n  //     const customCommon = Common.forCustomChain(\n  //         'mainnet',\n  //         {\n  //           name: 'TestNetwork',\n  //           networkId: 7777,\n  //           chainId: 7777,\n  //         },\n  //         'petersburg',\n  //       )\n  //     var privateKey = new Buffer('e8d1574304a68b5f794d33a842389350d93e49d46b6871571f9b64eaa53131ec', 'hex')\n  //     const addressFrom = '0x1206D8C3c73e40c8AfD0D878bbaa28609F9A72a9';\n  //     const addressTo = '0xdf41d535f8c4ddb21270c0e69136a02608ac09ea';\n  //     var nonceNumber = web3.utils.toHex(await web3.eth.getTransactionCount(addressFrom, 'pending'));\n  //         console.log(nonceNumber);\n  //     var rawTx = {\n  //         nonce: nonceNumber,\n  //         from: addressFrom,\n  //         gasLimit: web3.utils.toHex(25000),\n  //         gasPrice: web3.utils.toHex(10e9),\n  //         to: addressTo,\n  //         value: web3.utils.toHex(web3.utils.toWei('20', 'ether')),\n  //     }\n  //     console.log(rawTx);\n  //     var tx = new Tx.Transaction(rawTx,{common: customCommon});\n  //     console.log(tx);\n  //     tx.sign(privateKey);\n  //     if (\n  //         tx.validate() &&\n  //         bufferToHex(tx.getSenderAddress()) === bufferToHex(privateToAddress(privateKey))\n  //       ) {\n  //         console.log('Valid signature')\n  //       } else {\n  //         console.log('Invalid signature')\n  //       }\n  //     console.log(\"The transaction's chain id is\", tx.getChainId())\n  //     var serializedTx = tx.serialize();\n  //     await web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))\n  //     .on('receipt', console.log);\n  // }\n  render() {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        children: \"Welcome to the local Blockchain Network!\"\n      }), /*#__PURE__*/_jsx(\"h3\", {\n        children: \" Make a transaction: \"\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"submit\",\n        onClick: this.onClick,\n        children: \"Submit\"\n      }), /*#__PURE__*/_jsx(\"h3\", {\n        children: \" Check Text: \"\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"submit\",\n        onClick: this.onClick2,\n        children: \"Check Text\"\n      }), /*#__PURE__*/_jsx(\"h3\", {\n        children: \" Set new text: \"\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"submit\",\n        onClick: this.onClick3,\n        children: \"Submit\"\n      }), /*#__PURE__*/_jsx(\"h3\", {\n        children: \" Send Raw transaction: \"\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"submit\",\n        onClick: this.onClick4,\n        children: \"Submit\"\n      })]\n    });\n  }\n\n}\n\nexport default TestIndex;","map":null,"metadata":{},"sourceType":"module"}