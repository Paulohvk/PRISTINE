{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Message, Table, Grid, Modal } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport getEvents from \"../../components/getEvents\";\nimport getTags from \"../../components/getTags\";\nimport decodeData from \"../../components/decodeData\";\nimport web3 from \"../../Ethereum/web3\";\nimport contract2 from \"../../Ethereum/contract2\";\nimport Common from \"ethereumjs-common\";\n\nvar Tx = require(\"ethereumjs-tx\");\n\nclass Show extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      buyer_add: \"\",\n      errorMessage: \"\",\n      successMessage: \"\",\n      loading: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        errorMessage: \"\",\n        successMessage: \"\"\n      });\n      const timestamp = +new Date(); // console.log(timestamp);\n\n      const e = this.props.event;\n      const decodedData = decodeData(e);\n      const dataID = parseInt(e.topics[2], 16);\n      const addressFrom = this.state.buyer_add;\n      const transferValue = decodedData[2]._hex;\n      const recipient = \"0x\" + e.topics[1].substr(26, 64); // const recipient = \"0xa1b9207bff69cc6149c13b820576403631f0b39d\";\n      // console.log('1 ' + dataID);\n      // console.log('2 ' + addressFrom);\n      // console.log('3 ' + transferValue);\n      // console.log('4 ' + recipient);\n\n      var privateKey = new Buffer.from(\"51d6a4bb8508c91a3d78de5d4a137c83bb6f602998937e2c034f1c7eb656609c\", //\"e8d1574304a68b5f794d33a842389350d93e49d46b6871571f9b64eaa53131ec\",\n      \"hex\");\n\n      try {\n        var nonceNumber = web3.utils.toHex(await web3.eth.getTransactionCount(addressFrom, \"pending\"));\n        console.log(nonceNumber);\n        const customCommon = Common.forCustomChain(\"mainnet\", {\n          name: \"localchain\",\n          networkId: 777,\n          chainId: 777\n        }, \"petersburg\");\n        var myData = contract2.methods.EmitEvent(recipient, transferValue, dataID, timestamp.toString()).encodeABI();\n        var rawTx = {\n          nonce: nonceNumber,\n          from: addressFrom,\n          gasLimit: web3.utils.toHex(100000),\n          gasPrice: web3.utils.toHex(10e9),\n          to: contract2._address,\n          data: myData,\n          value: transferValue\n        };\n        var tx = new Tx.Transaction(rawTx, {\n          common: customCommon\n        });\n        tx.sign(privateKey);\n        var serializedTx = tx.serialize();\n        var receipt = await web3.eth.sendSignedTransaction(\"0x\" + serializedTx.toString(\"hex\")).on(\"receipt\", console.log);\n        this.setState({\n          successMessage: \"Transaction successfull, transaction hash: \" + receipt.transactionHash\n        });\n      } catch (error) {\n        this.setState({\n          errorMessage: error.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  static async getInitialProps(props) {\n    const address = props.query.address;\n    const results = await getEvents();\n    const decodedEvents = results.events;\n\n    const aux = item => item.transactionHash === address;\n\n    const index = decodedEvents.findIndex(aux);\n    const event = decodedEvents[index];\n    return {\n      event\n    };\n  }\n\n  render() {\n    const e = this.props.event;\n    const decodedData = decodeData(e);\n    const txHash = e.transactionHash;\n    const blockHash = e.blockHash;\n    const blockNumber = e.blockNumber;\n    const dataOwner = \"0x\" + e.topics[1].substr(26, 64).toUpperCase();\n    const dataType = getTags(e);\n    const dataID = parseInt(e.topics[2], 16);\n    const cost = decodedData[2]._hex;\n    const timestamp = new Date(parseInt(decodedData[1])).toLocaleString();\n    const colour = \"yellow\";\n    return /*#__PURE__*/_jsx(Layout, {\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsxs(Table, {\n          color: colour,\n          children: [/*#__PURE__*/_jsx(Table.Header, {\n            children: /*#__PURE__*/_jsxs(Table.Row, {\n              children: [/*#__PURE__*/_jsx(Table.HeaderCell, {\n                children: \"Property\"\n              }), /*#__PURE__*/_jsx(Table.HeaderCell, {\n                children: \"Value\"\n              })]\n            })\n          }), /*#__PURE__*/_jsxs(Table.Body, {\n            children: [/*#__PURE__*/_jsxs(Table.Row, {\n              children: [/*#__PURE__*/_jsx(Table.Cell, {\n                children: \"Transaction Hash:\"\n              }), /*#__PURE__*/_jsx(Table.Cell, {\n                children: txHash\n              })]\n            }), /*#__PURE__*/_jsxs(Table.Row, {\n              children: [/*#__PURE__*/_jsx(Table.Cell, {\n                children: \"Block Hash:\"\n              }), /*#__PURE__*/_jsx(Table.Cell, {\n                children: blockHash\n              })]\n            }), /*#__PURE__*/_jsxs(Table.Row, {\n              children: [/*#__PURE__*/_jsx(Table.Cell, {\n                children: \"Block Number:\"\n              }), /*#__PURE__*/_jsx(Table.Cell, {\n                children: blockNumber\n              })]\n            }), /*#__PURE__*/_jsxs(Table.Row, {\n              children: [/*#__PURE__*/_jsx(Table.Cell, {\n                children: \"Data Owner:\"\n              }), /*#__PURE__*/_jsx(Table.Cell, {\n                children: dataOwner\n              })]\n            }), /*#__PURE__*/_jsxs(Table.Row, {\n              children: [/*#__PURE__*/_jsx(Table.Cell, {\n                children: \"Data Tags:\"\n              }), /*#__PURE__*/_jsx(Table.Cell, {\n                children: dataType\n              })]\n            }), /*#__PURE__*/_jsxs(Table.Row, {\n              children: [/*#__PURE__*/_jsx(Table.Cell, {\n                children: \"Data ID:\"\n              }), /*#__PURE__*/_jsx(Table.Cell, {\n                children: dataID\n              })]\n            }), /*#__PURE__*/_jsxs(Table.Row, {\n              children: [/*#__PURE__*/_jsx(Table.Cell, {\n                children: \"Data Cost:\"\n              }), /*#__PURE__*/_jsxs(Table.Cell, {\n                children: [parseInt(cost, 16), \" Tokens\"]\n              })]\n            }), /*#__PURE__*/_jsxs(Table.Row, {\n              children: [/*#__PURE__*/_jsx(Table.Cell, {\n                children: \"Timestamp:\"\n              }), /*#__PURE__*/_jsx(Table.Cell, {\n                children: timestamp\n              })]\n            })]\n          })]\n        }, colour), /*#__PURE__*/_jsx(Form, {\n          onSubmit: this.onSubmit,\n          error: !!this.state.errorMessage,\n          success: !!this.state.successMessage,\n          children: /*#__PURE__*/_jsxs(Grid, {\n            children: [/*#__PURE__*/_jsxs(Grid.Row, {\n              children: [/*#__PURE__*/_jsx(Grid.Column, {\n                width: 8,\n                children: /*#__PURE__*/_jsx(Form.Input, {\n                  flex: \"true\",\n                  label: {\n                    children: \"Your Address:\",\n                    style: {\n                      fontSize: '16px'\n                    }\n                  },\n                  placeholder: \"0xabcd1234\",\n                  id: \"buyer_add\",\n                  value: this.state.buyer_add,\n                  onChange: event => this.setState({\n                    buyer_add: event.target.value\n                  })\n                })\n              }), /*#__PURE__*/_jsx(Grid.Column, {\n                verticalAlign: \"middle\",\n                width: 5,\n                children: /*#__PURE__*/_jsxs(Button, {\n                  loading: this.state.loading,\n                  primary: true,\n                  children: [\"Buy for \", parseInt(cost, 16), \" Tokens\"]\n                })\n              })]\n            }), /*#__PURE__*/_jsx(\"h4\", {}), /*#__PURE__*/_jsx(Message, {\n              error: true,\n              header: \"Oops!\",\n              content: this.state.errorMessage\n            }), /*#__PURE__*/_jsx(Message, {\n              success: true,\n              header: \"Completed!\",\n              content: this.state.successMessage\n            })]\n          })\n        })]\n      })\n    });\n  }\n\n}\n\nexport default Show;","map":null,"metadata":{},"sourceType":"module"}