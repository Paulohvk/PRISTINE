{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/paulo/Desktop/Private_Blockchain/Web/WebApp/pages/index.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Button, Input, Message } from 'semantic-ui-react';\nimport contract from '../Ethereum/contract0';\nimport web3 from '../Ethereum/web3';\nimport Common from 'ethereumjs-common';\nimport { bufferToHex, privateToAddress } from 'ethereumjs-util';\n\nvar Tx = require('ethereumjs-tx');\n\nclass TestIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onClick2\", async event => {\n      const text = await contract.methods.text().call();\n      window.alert(text);\n    });\n  }\n\n  // onClick3 = async(event) => {\n  //     const account = this.props.accounts[0];\n  //     console.log(account);\n  //     await contract.methods.setText(\"Test 1234\")\n  //     .send({from: account, gas: '100000'});\n  // }\n  // onClick4 = async(event) => {\n  //     const customCommon = Common.forCustomChain(\n  //         'mainnet',\n  //         {\n  //           name: 'TestNetwork',\n  //           networkId: 7777,\n  //           chainId: 7777,\n  //         },\n  //         'petersburg',\n  //       )\n  //     var privateKey = new Buffer('e8d1574304a68b5f794d33a842389350d93e49d46b6871571f9b64eaa53131ec', 'hex')\n  //     const addressFrom = '0x1206D8C3c73e40c8AfD0D878bbaa28609F9A72a9';\n  //     const addressTo = '0xdf41d535f8c4ddb21270c0e69136a02608ac09ea';\n  //     var nonceNumber = web3.utils.toHex(await web3.eth.getTransactionCount(addressFrom, 'pending'));\n  //         console.log(nonceNumber);\n  //     var rawTx = {\n  //         nonce: nonceNumber,\n  //         from: addressFrom,\n  //         gasLimit: web3.utils.toHex(25000),\n  //         gasPrice: web3.utils.toHex(10e9),\n  //         to: addressTo,\n  //         value: web3.utils.toHex(web3.utils.toWei('20', 'ether')),\n  //     }\n  //     console.log(rawTx);\n  //     var tx = new Tx.Transaction(rawTx,{common: customCommon});\n  //     console.log(tx);\n  //     tx.sign(privateKey);\n  //     if (\n  //         tx.validate() &&\n  //         bufferToHex(tx.getSenderAddress()) === bufferToHex(privateToAddress(privateKey))\n  //       ) {\n  //         console.log('Valid signature')\n  //       } else {\n  //         console.log('Invalid signature')\n  //       }\n  //     console.log(\"The transaction's chain id is\", tx.getChainId())\n  //     var serializedTx = tx.serialize();\n  //     await web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))\n  //     .on('receipt', console.log);\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Welcome to the local Blockchain Network!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Make a transaction: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        onClick: this.onClick,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Check Text: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        onClick: this.onClick2,\n        children: \"Check Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Set new text: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        onClick: this.onClick3,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Send Raw transaction: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        onClick: this.onClick4,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default TestIndex;","map":{"version":3,"sources":["/home/paulo/Desktop/Private_Blockchain/Web/WebApp/pages/index.js"],"names":["React","Component","Form","Button","Input","Message","contract","web3","Common","bufferToHex","privateToAddress","Tx","require","TestIndex","event","text","methods","call","window","alert","render","onClick","onClick2","onClick3","onClick4"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,IAAR,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,OAA7B,QAA2C,mBAA3C;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,EAAsBC,gBAAtB,QAA8C,iBAA9C;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAhB;;AAEA,MAAMC,SAAN,SAAwBZ,SAAxB,CAAkC;AAAA;AAAA;;AAAA,sCAkBnB,MAAMa,KAAN,IAAgB;AACvB,YAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,OAAT,CAAiBD,IAAjB,GAAwBE,IAAxB,EAAnB;AACAC,MAAAA,MAAM,CAACC,KAAP,CAAaJ,IAAb;AACH,KArB6B;AAAA;;AAuB9B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEAK,EAAAA,MAAM,GAAG;AACL,wBAAQ;AAAA,8BACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADI,eAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFI,eAGJ,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKC,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHI,eAKJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALI,eAMJ,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANI,eAOJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPI,eAQJ,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARI,eASJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATI,eAUJ,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVI;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAaH;;AAjG6B;;AAoGlC,eAAeX,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport {Form, Button, Input, Message} from 'semantic-ui-react';\nimport contract from '../Ethereum/contract0';\nimport web3 from '../Ethereum/web3';\nimport Common from 'ethereumjs-common';\nimport { bufferToHex, privateToAddress } from 'ethereumjs-util'\nvar Tx = require('ethereumjs-tx');\n\nclass TestIndex extends Component {\n\n    // static async getInitialProps() {\n    //     const accounts = await web3.eth.getAccounts();\n    //     console.log(accounts[0]);\n\n    //     return {accounts};\n    // }\n\n    // onClick = async(event) => {\n    //     const account = this.props.accounts[0];\n    //     console.log(account);\n    //     await web3.eth.sendTransaction({from: account,\n    //         to: \"0x1206D8C3c73e40c8AfD0D878bbaa28609F9A72a9\",\n    //         value: web3.utils.toWei(\"50\", 'ether')})\n    //         .on('receipt', console.log);\n    // }\n\n    onClick2 = async(event) => {\n        const text = await contract.methods.text().call();\n        window.alert(text);\n    }\n\n    // onClick3 = async(event) => {\n    //     const account = this.props.accounts[0];\n    //     console.log(account);\n    //     await contract.methods.setText(\"Test 1234\")\n    //     .send({from: account, gas: '100000'});\n    // }\n\n    // onClick4 = async(event) => {\n    //     const customCommon = Common.forCustomChain(\n    //         'mainnet',\n    //         {\n    //           name: 'TestNetwork',\n    //           networkId: 7777,\n    //           chainId: 7777,\n    //         },\n    //         'petersburg',\n    //       )\n\n    //     var privateKey = new Buffer('e8d1574304a68b5f794d33a842389350d93e49d46b6871571f9b64eaa53131ec', 'hex')\n\n    //     const addressFrom = '0x1206D8C3c73e40c8AfD0D878bbaa28609F9A72a9';\n\n    //     const addressTo = '0xdf41d535f8c4ddb21270c0e69136a02608ac09ea';\n        \n    //     var nonceNumber = web3.utils.toHex(await web3.eth.getTransactionCount(addressFrom, 'pending'));\n    //         console.log(nonceNumber);\n    //     var rawTx = {\n    //         nonce: nonceNumber,\n    //         from: addressFrom,\n    //         gasLimit: web3.utils.toHex(25000),\n    //         gasPrice: web3.utils.toHex(10e9),\n    //         to: addressTo,\n    //         value: web3.utils.toHex(web3.utils.toWei('20', 'ether')),\n    //     }\n\n    //     console.log(rawTx);\n\n    //     var tx = new Tx.Transaction(rawTx,{common: customCommon});\n\n    //     console.log(tx);\n\n    //     tx.sign(privateKey);\n\n    //     if (\n    //         tx.validate() &&\n    //         bufferToHex(tx.getSenderAddress()) === bufferToHex(privateToAddress(privateKey))\n    //       ) {\n    //         console.log('Valid signature')\n    //       } else {\n    //         console.log('Invalid signature')\n    //       }\n        \n    //     console.log(\"The transaction's chain id is\", tx.getChainId())\n\n    //     var serializedTx = tx.serialize();\n\n    //     await web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))\n    //     .on('receipt', console.log);\n    // }\n\n    render() {\n        return (<div>\n            <div>Welcome to the local Blockchain Network!</div>\n            <h3> Make a transaction: </h3>\n            <Button type='submit' onClick={this.onClick}>Submit</Button>\n\n            <h3> Check Text: </h3>\n            <Button type='submit' onClick={this.onClick2}>Check Text</Button>\n            <h3> Set new text: </h3>\n            <Button type='submit' onClick={this.onClick3}>Submit</Button>\n            <h3> Send Raw transaction: </h3>\n            <Button type='submit' onClick={this.onClick4}>Submit</Button>\n            </div>\n        );\n    }\n}\n\nexport default TestIndex;"]},"metadata":{},"sourceType":"module"}